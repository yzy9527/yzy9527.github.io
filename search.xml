<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSRF攻击</title>
    <url>/2020/11/20/web%E5%AE%89%E5%85%A8/csrf/</url>
    <content><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><ul>
<li>Cross Site Request Forgy</li>
<li>跨站请求伪造</li>
</ul>
<p>一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法；简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。</p>
<blockquote>
<p><code>XSS</code> 是指本网站运行了来自其他网站的脚本； <code>SCRF</code>是指其它网站对本网站产生了影响</p>
</blockquote>
<h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ul>
<li>利用用户登录态 </li>
<li>用户不知情</li>
<li>完成业务请求</li>
<li>盗取用户资料</li>
<li>冒充用户发帖背锅</li>
<li>损害网站名誉</li>
</ul>
<h2 id="CSRF攻击案例"><a href="#CSRF攻击案例" class="headerlink" title="CSRF攻击案例"></a>CSRF攻击案例</h2><ul>
<li><p>qq游戏购买道具</p>
<p> <code>http://account.play.qq.com:8080//cgi-bin/buyitem_present_yxb1?item_id=56&amp;item_num=1</code></p>
<p> 上面接口使用了一个get请求，如果用户登录了qq，则会购买ID为56的道具一件，给用户造成了实际的损失（一点就爆炸，现已修复）</p>
 <a id="more"></a>
</li>
<li><p>qq音乐分享到腾讯微博</p>
<p> 通过点击微博内的链接，就会进入到攻击者的网站，该网站中包含以下代码，此时用户就会受到csrf攻击<br> <img src="https://qiniu.xiaoxilao.com/20201115145459.png" alt></p>
</li>
</ul>
<h2 id="CSRF攻击防御"><a href="#CSRF攻击防御" class="headerlink" title="CSRF攻击防御"></a>CSRF攻击防御</h2><h3 id="1-SameSite-属性"><a href="#1-SameSite-属性" class="headerlink" title="1. SameSite 属性"></a>1. SameSite 属性</h3><p>Cookie 的<code>SameSite</code>属性用来限制第三方 Cookie，从而减少安全风险。它可以设置三个值</p>
<ul>
<li>Strict</li>
<li>Lax</li>
<li>None</li>
</ul>
<p><strong>Strict</strong></p>
<p>Strict最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。</p>
<pre><code>Set-Cookie: CookieName=CookieValue; SameSite=Strict;</code></pre><p>这个规则过于严格，可能造成非常不好的用户体验。比如，当前网页有一个 GitHub 链接，用户点击跳转就不会带有 GitHub 的 Cookie，跳转过去总是未登陆状态。</p>
<p><strong>Lax</strong></p>
<p><code>Lax</code>规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。</p>
<pre><code>Set-Cookie: CookieName=CookieValue; SameSite=Lax;</code></pre><p>导航到目标网址的 GET 请求，只包括三种情况：链接，预加载请求，GET 表单</p>
<table>
<thead>
<tr>
<th>请求类型</th>
<th align="center">示例</th>
<th align="right">正常情况</th>
<th align="right">Lax</th>
</tr>
</thead>
<tbody><tr>
<td>链接</td>
<td align="center"><code>&lt;a href=&quot;...&quot;&gt;&lt;/a&gt;</code></td>
<td align="right">发送 Cookie</td>
<td align="right">发送 Cookie</td>
</tr>
<tr>
<td>预加载</td>
<td align="center"><code>&lt;link rel=&quot;prerender&quot; href=&quot;...&quot;/&gt;</code></td>
<td align="right">发送 Cookie</td>
<td align="right">发送 Cookie</td>
</tr>
<tr>
<td>GET 表单</td>
<td align="center"><code>&lt;form method=&quot;GET&quot; action=&quot;...&quot;&gt;</code></td>
<td align="right">发送 Cookie</td>
<td align="right">发送 Cookie</td>
</tr>
<tr>
<td>POST 表单</td>
<td align="center"><code>&lt;form method=&quot;POST&quot; action=&quot;...&quot;&gt;</code></td>
<td align="right">发送 Cookie</td>
<td align="right">不发送</td>
</tr>
<tr>
<td>iframe</td>
<td align="center"><code>&lt;iframe src=&quot;...&quot;&gt;&lt;/iframe&gt;</code></td>
<td align="right">发送 Cookie</td>
<td align="right">不发送</td>
</tr>
<tr>
<td>AJAX</td>
<td align="center"><code>$.get(&quot;...&quot;)</code></td>
<td align="right">发送 Cookie</td>
<td align="right">不发送</td>
</tr>
<tr>
<td>Image</td>
<td align="center"><code>&lt;img src=&quot;...&quot;&gt;</code></td>
<td align="right">发送 Cookie</td>
<td align="right">不发送</td>
</tr>
</tbody></table>
<p><strong>None</strong></p>
<p>Chrome 计划将<code>Lax</code>变为默认设置。这时，网站可以选择显式关闭<code>SameSite</code>属性，将其设为<code>None</code>。不过，前提是必须同时设置<code>Secure</code>属性（Cookie 只能通过 HTTPS 协议发送），否则无效。</p>
<p>下面的设置无效。</p>
<pre><code>Set-Cookie: widget_session=abc123; SameSite=None</code></pre><p>下面的设置有效。</p>
<pre><code>Set-Cookie: widget_session=abc123; SameSite=None; Secure</code></pre><h3 id="2-验证码和token"><a href="#2-验证码和token" class="headerlink" title="2.验证码和token"></a>2.验证码和token</h3><p>验证码需要用户参与，必须访问前端网站，后台比较当前用户输入的验证码和下发的验证码是否一致，可有效防止csrf攻击;</p>
<h3 id="3-refere"><a href="#3-refere" class="headerlink" title="3.refere"></a>3.refere</h3><p>验证refer,判断请求来源，禁止来自第三方的请求</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>CSRF攻击</category>
      </categories>
  </entry>
  <entry>
    <title>xss攻击</title>
    <url>/2020/11/13/web%E5%AE%89%E5%85%A8/xss/</url>
    <content><![CDATA[<p>安全问题：</p>
<ul>
<li>用户身份被盗用</li>
<li>用户密码泄露</li>
<li>用户资料被盗取</li>
<li>网站数据库泄露</li>
<li>其他</li>
</ul>
<p>web 安全的重要性</p>
<ul>
<li>直接面向用户</li>
<li>网站和用户安全是生命线</li>
<li>安全事故威胁企业生产、口碑甚至生存</li>
</ul>
<h1 id="XSS-Cross-Site-Scripting"><a href="#XSS-Cross-Site-Scripting" class="headerlink" title="XSS (Cross Site Scripting)"></a>XSS (Cross Site Scripting)</h1><ul>
<li><p>跨站脚本攻击</p>
<blockquote>
<p>为了防止简称和CSS冲突，故改为XSS</p>
</blockquote>
<h2 id="xss分类"><a href="#xss分类" class="headerlink" title="xss分类"></a>xss分类</h2></li>
<li><p>反射型 （url直接注入）</p>
<p> 如url为<code>www.abc.com?sokey=&lt;script&gt;alert(1)&lt;/script&gt;</code>,攻击者将上面的URL发送给其他用户时才会产生作用，此时攻击者会将这类url转为短网址;例如：<code>https://www.baidu.com/s?cl=3&amp;tn=baidutop10&amp;fr=top1000&amp;wd=%E7%89%B9%E6%9C%97%E6%99%AE%E5%9B%A2%E9%98%9F%E4%BA%AE%E5%87%BA%E7%99%BE%E9%A1%B5%E9%80%89%E4%B8%BE%E6%AC%BA%E8%AF%88%E8%AF%81%E8%AF%8D&amp;rsv_idx=2&amp;rsv_dl=fyb_n_homepage&amp;hisfilter=1</code>和 <code>http://dwz.win/WVm</code>是一样的，从而达到欺骗用户的目的</p>
</li>
<li><p>存储性 （存储到DB后读取时注入）<br> 这类攻击不易被发现，且危害大，因为是存储到数据库中，所以其他用户访问这个网站时，都会受到攻击；例：在页面的评论区中评论内容并添加alert脚本，由于内容是存储到数据库中的，故其他用户每次访问都会受到攻击</p>
 <a id="more"></a>

</li>
</ul>
<h2 id="xss攻击注入点"><a href="#xss攻击注入点" class="headerlink" title="xss攻击注入点"></a>xss攻击注入点</h2><ul>
<li><p>html节点内容</p>
<p>当网页中的某一个节点是动态生成的，里面包含用户的输入信息，有可能输入的信息包含脚本，从而导致xss攻击<br> <img src="https://qiniu.xiaoxilao.com/1605192471345_4.png" alt></p>
</li>
</ul>
<ul>
<li><p>HTML属性</p>
<p> 当某个HTML的节点的某个属性是由用户的输入数据组成的，那么这个用户的输入数据有可能包含脚本，或者越出这个属性的范围，从而导致xss攻击<br><br> 例：用户的头像是通过get请求根据id来获取的，如<br> <code>localhost:8989/?avatarid=9527</code></p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/user/9527"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 后面追加<br> <code>localhost:8989/?avatarid=9527&quot;</code></p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/user/9527"</span> "&gt;</span></span><br></pre></td></tr></table></figure>

<p> 此时，如果输入时添加<code>onerror</code>,就可以看到弹窗了<br> <code>localhost：8089/?avatarid= 1 &quot;onerror=&quot;alert(&#39;123&#39;)</code></p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/user/1"</span> <span class="attr">onerror</span>=<span class="string">"alert('123')"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>js代码</p>
<p> js代码中存在由后台注入的变量或者里面包含了用户输入的信息，这时候用户输入的信息有可能会改变js代码的逻辑，从而导致xss攻击<br><br> 例：<br> 如后台指定输入字段生成script标签插入html<br> <code>localhost:8989/?name=baidu&quot;</code><br> 此时html中</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> name = <span class="string">"baidu"</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 如果后面追加alert<br> <code>localhost:8989/?name=gaoshiqing&quot;;alert(1);&quot;</code></p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="string">"gaoshiqing"</span>;alert(<span class="number">1</span>);<span class="string">""</span></span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li><p>富文本</p>
<p>  富文本中既要保留文本的格式又要去除可能造成xss攻击的代码，容易导致xss攻击</p>
</li>
</ul>
<h2 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h2><ol>
<li><p>浏览器自带防御</p>
<p> 浏览器防御有限，自动防御反射型xss,当url的参数再次出现在页面中，浏览器就会进行拦截（参数出现在HTML内容或属性中）；<br> <img src="https://qiniu.xiaoxilao.com/20201112233112.png" alt></p>
<blockquote>
<p>在js中注入的参数，虽然出现在了url和页面中，但此时浏览器的xss防御机制并没有起作用；此外并不是所有的浏览器都支持防御</p>
</blockquote>
</li>
<li><p>对html内容和属性进行转义</p>
<p> 对用户的输入进行转义，有一下两种方法：</p>
<ul>
<li><p>在上传数据时进行转义</p>
</li>
<li><p>在显示时进行转义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> escapehtml = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!str) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    str = str.replace(<span class="regexp">/&amp;/g</span>,<span class="string">'&amp;amp;'</span>)</span><br><span class="line">    str = str.replace(<span class="regexp">/&lt;/g</span>,<span class="string">'&amp;lt;'</span>)</span><br><span class="line">    str = str.replace(<span class="regexp">/&gt;/g</span>,<span class="string">'&amp;gt;'</span>)</span><br><span class="line">    str = str.replace(<span class="regexp">/"/g</span>,<span class="string">'&amp;quto;'</span>)</span><br><span class="line">    str = str.replace(<span class="regexp">/'/g</span>,<span class="string">'&amp;#39;'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>js转义</p>
<p> 防止用户或者后台在js中插入的数据可能突破<code>&quot;</code>的边界，产生一个新的语句；</p>
<ul>
<li><p>对<code>&quot;</code>和<code>\</code>进行转义,</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str = str.replace(<span class="regexp">/\\/g</span>,<span class="string">'\\\\'</span>)</span><br><span class="line">str = str.replace(<span class="regexp">/"/g</span>,<span class="string">'\\"'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>对数据进行json转换</p>
<p>例：以下为后台转义后返回</p>
<p><code>localhost:8989/?name=hello&quot;;alert(1);&quot;</code></p>
<p>没有做任何处理时，生成了一条可执行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="string">"hello"</span>;alert(<span class="number">1</span>);<span class="string">""</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对<code>&quot;</code>转义后，<code>name</code>变成了字符串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="string">"hello\";alert(1);\""</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时输入中添加<code>\</code>，后面的<code>/</code>直接变成了注释负，代码又满血复活</p>
<p><code>localhost:8989/?name=hello\&quot;;alert(1);//</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="string">"hello\\"</span>;alert(<span class="number">1</span>);<span class="comment">//"</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以需对<code>&quot;</code>和<code>/</code>同时进行转义，但为了防止有其他的情况出现，最好对用户的输入使用<code>JSON.stringify()</code>进行处理</p>
</li>
</ul>
</li>
<li><p>富文本</p>
<p> 富文本其实就是一大段的<code>HTML</code>，包含着许多的格式，因此无法对全部<code>HTML</code>进行转义，但保留<code>HTML</code>格式就要面临着<code>xss</code>攻击的风险；所以要对<code>HTML</code>进行过滤，过滤一般分为以下两种：</p>
<ul>
<li><p>黑名单<br>主要是将一些<code>HTML</code>的标签或属性,如<code>script</code>、<code>onerror</code>进行删除；黑名单的实现相对简单，一般按照正则表达式去过滤就可以了，但其弊端在于<code>HTML</code>是一个非常繁杂和庞大的系统，稍不留神就会留下漏洞</p>
</li>
<li><p>白名单<br>只允许指定的标签和属性存在，比较彻底，但实现起来比较麻烦，它需要将<code>HTML</code>全部转换为数据结构，然后对这个数据结构进行过滤，再组装成<code>HTML</code>，数据结构类似下图<br><img src="https://qiniu.xiaoxilao.com/20201113223738.png" alt><br>也可以使用开源库 <a href="https://github.com/leizongmin/js-xss/blob/master/README.zh.md" target="_blank" rel="noopener">js-xss</a></p>
</li>
</ul>
</li>
</ol>
<p>富文本的过滤主要在用户的输入时进行过滤，如果在输出的时候进行过滤可能会造成一些性能问题</p>
<h2 id="csp"><a href="#csp" class="headerlink" title="csp"></a>csp</h2><p>“网页安全政策”（Content Security Policy，缩写 CSP）</p>
<p>CSP 的实质就是白名单制度，它指定哪些部分可以被执行，哪些部分不可以被执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: <span class="keyword">default</span>-src <span class="string">'self'</span></span><br></pre></td></tr></table></figure>

<p>上面代码限制所有的外部资源，都只能从当前域名加载。详情可参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener">内容安全策略( CSP )</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>xss攻击</category>
      </categories>
  </entry>
  <entry>
    <title>js-canvas实现图片压缩</title>
    <url>/2020/06/02/JavaScript/image-compress/</url>
    <content><![CDATA[<p>前端项目中经常会碰到一些展示图片的地方，比如轮播图、头像上传等;对于这些场景，比如轮播图需要的图片为1000<em>500，但用户可能会上传尺寸为2000</em>1000大小的图片，这不仅会影响文件上传的速度又浪费了服务器资源；</p>
<p>本文就对<code>js图片压缩</code>做一些总结</p>
<h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><ul>
<li>将压缩后图片大小控制在800*800内</li>
<li>小于800*800的不进行压缩</li>
</ul>
<p>先来看张效果图<br><img src="https://qiniu.xiaoxilao.com/js-compress.png" alt></p>
<p>上面展示中将一张<code>1244*700</code>的图片经过压缩后变成了<code>800*450</code>，图片大小从<code>307k</code>变成了<code>84k</code></p>
 <a id="more"></a>
<p>首先在<code>html</code>中搞一个上传按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"upload"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来对上传按钮进行监听</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> acceptType = [<span class="string">'image/jpg'</span>, <span class="string">'image/jpeg'</span>]</span><br><span class="line"><span class="keyword">const</span> MAXSIZE = <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line"><span class="keyword">const</span> MAXSIZE_STR = <span class="string">'1MB'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="built_in">document</span>.getElementById(<span class="string">'upload'</span>)</span><br><span class="line"></span><br><span class="line">upload.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [file] = e.target.files</span><br><span class="line">    <span class="comment">// console.log(e)</span></span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">type</span>: fileType, <span class="attr">size</span>: fileSize&#125; = file</span><br><span class="line">    <span class="comment">//检查图片类型</span></span><br><span class="line">    <span class="keyword">if</span> (acceptType.indexOf(fileType) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">`不支持[<span class="subst">$&#123;fileType&#125;</span>]文件类型`</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查文件大小</span></span><br><span class="line">    <span class="keyword">if</span> (fileSize &gt; MAXSIZE) &#123;</span><br><span class="line">        alert(<span class="string">`文件超出<span class="subst">$&#123;MAXSIZE_STR&#125;</span>!`</span>)</span><br><span class="line">        upload.value = <span class="string">''</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转base64</span></span><br><span class="line">    convertImgToBase64(file)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里对图片允许上传的最大值设定为了<code>1MB</code>；上传前检查文件类型和图片大小，以便后续操作</p>
<p>获取到图片文件后，利用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" title="FileReader" target="_blank" rel="noopener">FileReader</a>将图片转为<code>base64</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertImgToBase64</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">    <span class="comment">//readAsDataURL 方法会读取指定的 Blob 或 File 对象</span></span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> base64Imgage = e.target.result</span><br><span class="line">        <span class="comment">// const base64Imgage = reader.result</span></span><br><span class="line">        <span class="comment">// console.log(base64Imgage)</span></span><br><span class="line">        </span><br><span class="line">        compress(base64Imgage)</span><br><span class="line">        reader = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取到<code>base64</code>后</p>
<p>首先设定宽高</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> maxW = <span class="number">800</span></span><br><span class="line"><span class="keyword">let</span> maxH = <span class="number">800</span></span><br></pre></td></tr></table></figure>

<p>创建<code>image</code>对象，获取上传图片的宽高</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> image = <span class="keyword">new</span> Image()</span><br><span class="line">image.src = base64Imgage</span><br></pre></td></tr></table></figure>

<p>当image加载完成后将<code>maxW</code>和<code>image</code>的宽度进行比较<br>如果实际宽度大于<code>maxW</code>则进行压缩,并计算出压缩比，然后设定<code>maxH</code></p>
<p>以原图<code>1244*700</code>为例，<code>ratio = 1244 / 800</code> 等于<code>1.555</code>，<br>则<code>maxH</code>为<code>450</code>,故计算后的图片大小为 <code>800*450</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ratio <span class="comment">//图片压缩比</span></span><br><span class="line"><span class="keyword">let</span> needCompress = <span class="literal">false</span> <span class="comment">//是否需要压缩</span></span><br><span class="line"><span class="keyword">if</span> (maxW &lt; image.naturalWidth) &#123;</span><br><span class="line">    needCompress = <span class="literal">true</span></span><br><span class="line">    ratio = image.naturalWidth / maxW</span><br><span class="line">    maxH = image.naturalHeight / ratio</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时再对高度做相同的处理即可将图片大小设定在<code>800*800</code>内</p>
<p>获取压缩后的图片大小后，在利用canvas进行绘制，将canvas的宽高分别设置为<code>maxW</code> <code>maxH</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">canvas.setAttribute(<span class="string">'id'</span>,<span class="string">'__compress__'</span>)</span><br><span class="line"><span class="comment">//设置宽高</span></span><br><span class="line">canvas.width = maxW</span><br><span class="line">canvas.height = maxH</span><br><span class="line">canvas.style.visibility = <span class="string">'hidden'</span></span><br><span class="line"><span class="comment">//获取执行上下文</span></span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line"><span class="comment">//清空矩形内所有内容</span></span><br><span class="line">ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,maxW,maxH)</span><br><span class="line"> <span class="comment">//开始绘制图片</span></span><br><span class="line">ctx.drawImage(image,<span class="number">0</span>,<span class="number">0</span>,maxW,maxH)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定图片格式和图片质量</span></span><br><span class="line"><span class="keyword">const</span> compressImage = canvas.toDataURL(<span class="string">'image/jpeg'</span>,<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传</span></span><br><span class="line">uploadToServer(compressImage)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>canvas.toDataURL(type, encoderOptions); encoderOptions :在指定图片格式为 image/jpeg 或 image/webp的情况下，可以从 0 到 1 的区间内选择图片的质量。如果超出取值范围，将会使用默认值 0.92。其他参数会被忽略;若使用image/png还可能让图片变大</p>
</blockquote>
<p>获取base64图片</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadToServer</span>(<span class="params">compressImage</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//base64</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'上传到服务器...'</span>,compressImage)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>完整代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compress</span>(<span class="params">base64Imgage</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(base64Imgage)</span></span><br><span class="line">    <span class="keyword">let</span> maxW = <span class="number">800</span></span><br><span class="line">    <span class="keyword">let</span> maxH = <span class="number">800</span></span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> Image()</span><br><span class="line">    image.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> ratio <span class="comment">//图片压缩比</span></span><br><span class="line">        <span class="keyword">let</span> needCompress = <span class="literal">false</span> <span class="comment">//是否需要压缩</span></span><br><span class="line">        <span class="comment">// console.log(image.naturalWidth, image.naturalHeight)</span></span><br><span class="line">        <span class="keyword">if</span> (maxW &lt; image.naturalWidth) &#123;</span><br><span class="line">            needCompress = <span class="literal">true</span></span><br><span class="line">            ratio = image.naturalWidth / maxW</span><br><span class="line">            maxH = image.naturalHeight / ratio</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxH &lt; image.naturalHeight) &#123;</span><br><span class="line">            needCompress = <span class="literal">true</span></span><br><span class="line">            ratio = image.naturalHeight / maxH</span><br><span class="line">            maxW = image.naturalWidth / ratio</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不需要压缩</span></span><br><span class="line">        <span class="keyword">if</span> (!needCompress)&#123;</span><br><span class="line">            maxW = image.naturalWidth</span><br><span class="line">            maxH = image.naturalHeight</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ratio'</span>,ratio)</span><br><span class="line">        <span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">        canvas.setAttribute(<span class="string">'id'</span>,<span class="string">'__compress__'</span>)</span><br><span class="line">        canvas.width = maxW</span><br><span class="line">        canvas.height = maxH</span><br><span class="line">        canvas.style.visibility = <span class="string">'hidden'</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">        ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,maxW,maxH)<span class="comment">//清空矩形内所有内容</span></span><br><span class="line">        ctx.drawImage(image,<span class="number">0</span>,<span class="number">0</span>,maxW,maxH)</span><br><span class="line">        <span class="keyword">const</span> compressImage = canvas.toDataURL(<span class="string">'image/jpeg'</span>,<span class="number">0.9</span>)</span><br><span class="line">        uploadToServer(compressImage)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> _image = <span class="keyword">new</span> Image()</span><br><span class="line">        _image.src = compressImage</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(_image)</span><br><span class="line">        canvas.remove()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`压缩比：<span class="subst">$&#123;image.src.length<span class="regexp">/_image.src.length&#125;`)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    &#125;)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    image.src = base64Imgage</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;</span></span></span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>通过<code>input file</code>上传图片，使用<code>FileReader</code>读取上传的图片数据</li>
<li>将图片数据传给<code>image</code>,然后使用canvas绘制图片，调用<code>canvas.toDataURL</code>,进行压缩</li>
<li>获取压缩后的<code>base64</code>格式的图片数据</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Vue分片上传七牛云</title>
    <url>/2020/05/12/vue/qiniu-pupload/</url>
    <content><![CDATA[<p>最近项目碰到前端视频等大文件上传，之前项目都是后台通过七牛进行分片处理上传；现在对前端分片上传做个小笔记吧。</p>
<p>本实例采用vue + elementui + <a href="https://github.com/qiniu/js-sdk/tree/1.x" title="七牛" target="_blank" rel="noopener">qiniujs</a> + pupload实现视频等大文件的上传，实现断点续传、暂停、继续，以及分片上传</p>
<p>展示效果](<img src="https://qiniu.xiaoxilao.com/b_flex_auto.gif" alt></p>
<a id="more"></a>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>展示大小、速度、已上传、进度条；暂停，继续可根据需要添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"video_container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"showInfo"</span> <span class="attr">class</span>=<span class="string">"upload_info"</span>&gt;</span></span><br><span class="line">      共&#123;&#123; fileSize &#125;&#125;MB | 已上传&#123;&#123; fileLoaded &#125;&#125; | &#123;&#123; fileSpeed &#125;&#125;/s</span><br><span class="line">      <span class="tag">&lt;<span class="name">el-progress</span> <span class="attr">:percentage</span>=<span class="string">"filePercent"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入qiniu.min.js</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'qiniu-js/dist/qiniu.min.js'</span>)</span><br><span class="line"><span class="comment">//获取七牛token</span></span><br><span class="line"><span class="keyword">import</span> &#123; getQiNiuAccessToken &#125; <span class="keyword">from</span> <span class="string">'@/api/base'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    browse_button: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//文件上传大小限制</span></span><br><span class="line">    maxSize: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'1mb'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//可否多选</span></span><br><span class="line">    multi_selection: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//是否自动上传</span></span><br><span class="line">    auto_start: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">//七牛数据</span></span><br><span class="line">      domain: <span class="string">''</span>,</span><br><span class="line">      uptoken: <span class="string">''</span>,</span><br><span class="line">      </span><br><span class="line">      fileSize: <span class="number">0</span>, </span><br><span class="line">      fileLoaded: <span class="number">0</span>,</span><br><span class="line">      fileSpeed: <span class="number">0</span>,</span><br><span class="line">      filePercent: <span class="number">0</span>,</span><br><span class="line">      fileName: <span class="string">''</span>,</span><br><span class="line">      uploader: <span class="literal">null</span>,</span><br><span class="line">      showInfo: <span class="literal">false</span> <span class="comment">//是否显示上传数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getToken().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.start()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    start() &#123;</span><br><span class="line">      <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">this</span>.uploader = Qiniu.uploader(&#123;</span><br><span class="line">        multi_selection: _this.multi_selection,</span><br><span class="line">        runtimes: <span class="string">'html5,flash,html4'</span>, <span class="comment">// 上传模式，依次退化</span></span><br><span class="line">        browse_button: _this.browse_button, <span class="comment">// 上传选择的点选按钮，必需</span></span><br><span class="line">        uptoken: _this.uptoken, <span class="comment">// uptoken是上传凭证，由其他程序生成</span></span><br><span class="line">        get_new_uptoken: <span class="literal">false</span>, <span class="comment">// 设置上传文件的时候是否每次都重新获取新的uptoken</span></span><br><span class="line">        unique_names: <span class="literal">false</span>, <span class="comment">// 默认false，key为文件名。若开启该选项，JS-SDK会为每个文件自动生成key（文件名）</span></span><br><span class="line">        save_key: <span class="literal">false</span>, <span class="comment">// 默认false。若在服务端生成uptoken的上传策略中指定了sava_key，则开启，SDK在前端将不对key进行任何处理</span></span><br><span class="line">        domain: _this.domain,</span><br><span class="line">        container: <span class="string">'video_container'</span>,</span><br><span class="line">        max_file_size: _this.maxSize, <span class="comment">// 最大文件体积限制</span></span><br><span class="line">        dragdrop: <span class="literal">true</span>, <span class="comment">// 开启可拖曳上传</span></span><br><span class="line">        drop_element: <span class="string">'video_container'</span>, <span class="comment">// 拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传</span></span><br><span class="line">        chunk_size: <span class="string">'4mb'</span>, <span class="comment">// 分块上传时，每块的体积  html5 模式大于 4M 时可分块上传，小于4M时直传</span></span><br><span class="line">        max_retries: <span class="number">3</span>, <span class="comment">// 上传失败最大重试次数</span></span><br><span class="line">        auto_start: _this.auto_start, <span class="comment">// 选择文件后自动上传，若关闭需要自己绑定事件触发上传</span></span><br><span class="line">        filters: &#123;</span><br><span class="line">          mime_types: [&#123; <span class="attr">title</span>: <span class="string">'files'</span>, <span class="attr">extensions</span>: <span class="string">'mp4'</span> &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        init: &#123;</span><br><span class="line">          <span class="string">'FilesAdded'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, files</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'files'</span>, files)</span><br><span class="line">            plupload.each(files, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">              <span class="comment">// 文件添加进队列后，处理相关的事情</span></span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'FilesAdded'</span>)</span><br><span class="line">              _this.fileSize = _this.toDecimal(file.size)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'BeforeUpload'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 每个文件上传前，处理相关的事情</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'BeforeUpload'</span>)</span><br><span class="line">            _this.showInfo = <span class="literal">true</span></span><br><span class="line">            _this.$emit(<span class="string">'beforeUpload'</span>, <span class="literal">true</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'ChunkUploaded'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file, info</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ChunkUploaded'</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'UploadProgress'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 每个文件上传时，处理相关的事情</span></span><br><span class="line">            <span class="comment">// console.log('_this.filePause =')</span></span><br><span class="line">            <span class="comment">// console.log(_this.filePause)</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'UploadProgress'</span>)</span><br><span class="line">            _this.filePercent = <span class="built_in">parseInt</span>(file.percent)</span><br><span class="line">            _this.fileLoaded = plupload.formatSize(file.loaded).toUpperCase()</span><br><span class="line">            _this.fileSpeed = plupload.formatSize(file.speed).toUpperCase()</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'filePercent'</span>, _this.filePercent)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'FileUploaded'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file, info</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'FileUploaded'</span>)</span><br><span class="line">            <span class="keyword">const</span> domain = up.getOption(<span class="string">'domain'</span>)</span><br><span class="line">            <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(info.response)</span><br><span class="line">            <span class="keyword">const</span> sourceLink = domain + res.key</span><br><span class="line">            <span class="built_in">console</span>.log(sourceLink)</span><br><span class="line">            <span class="comment">//返回文件名</span></span><br><span class="line">            _this.$emit(<span class="string">'fileName'</span>, file.name)</span><br><span class="line">            <span class="comment">//返回url</span></span><br><span class="line">            _this.$emit(<span class="string">'onSuccess'</span>, sourceLink)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'Error'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, err, errTip</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 上传出错时，处理相关的事情</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Error ='</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'errTip ='</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(errTip)</span><br><span class="line">            _this.$message(&#123;</span><br><span class="line">              message: errTip,</span><br><span class="line">              type: <span class="string">'danger'</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'UploadComplete'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 队列文件处理完毕后，处理相关的事情</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'UploadComplete'</span>)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    toDecimal(size) &#123;</span><br><span class="line">      size = size / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line">      <span class="keyword">var</span> f = <span class="built_in">parseFloat</span>(size)</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(f)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      f = <span class="built_in">Math</span>.round(size * <span class="number">10</span>) / <span class="number">10</span></span><br><span class="line">      <span class="keyword">var</span> s = f.toString()</span><br><span class="line">      <span class="keyword">var</span> rs = s.indexOf(<span class="string">'.'</span>)</span><br><span class="line">      <span class="keyword">if</span> (rs &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        rs = s.length</span><br><span class="line">        s += <span class="string">'.'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (s.length &lt;= rs + <span class="number">1</span>) &#123;</span><br><span class="line">        s += <span class="string">'0'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> s</span><br><span class="line">    &#125;,</span><br><span class="line">    pauseUpload() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'pauseUpload'</span>)</span><br><span class="line">      <span class="keyword">this</span>.uploader.stop()</span><br><span class="line">    &#125;,</span><br><span class="line">    continueUpload() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'continueUpload'</span>)</span><br><span class="line">      <span class="keyword">this</span>.uploader.start()</span><br><span class="line">    &#125;,</span><br><span class="line">    initUpload() &#123;</span><br><span class="line">      <span class="keyword">this</span>.fileSize = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.fileLoaded = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.fileSpeed = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.filePercent = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.fileName = <span class="string">''</span></span><br><span class="line">      <span class="keyword">this</span>.showInfo = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'fileName'</span>, <span class="string">''</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//获取token</span></span><br><span class="line">    getToken() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        getQiNiuAccessToken().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; accessToken, domainUrl &#125; = res.data</span><br><span class="line">          <span class="keyword">this</span>.domain = domainUrl</span><br><span class="line">          <span class="keyword">this</span>.uptoken = accessToken</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>chunk_size:’4mb’<br>当<code>chunk_size</code>设置小于4mb时 会报错<br>error”:”block 0: unexpected block size</p>
<p>七牛qiniu.min.js 版本1.x ,在使用2.x版本时会提示找不到<code>uploader</code></p>
<p>需在<code>index.html</code> 引入了 <code>plupload.js</code></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>ipad qq浏览器HD video标签劫持问题</title>
    <url>/2019/10/27/video/qqHd/</url>
    <content><![CDATA[<p>问题来源：在升级iOS为12后，项目测试兼容性时发现，有些MP4格式视频在ipad qqHD上会出现以下bug:</p>
<ul>
<li>视频全屏播放会提前2秒结束</li>
</ul>
<p>于是，搞个demo吧，拷了个播放没问题的视频和有问题的视频用纯video标签试了一下，结果：正常的视频还是正常，有问题的视频还是提前2秒结束；（看来videojs是无辜的，看样子是视频的锅了）</p>
<p>好了，让压缩视频的人看看这两个视频是怎么压缩的，有啥子区别。结果。。。。。都是同一个妈生的。</p>
<p>好了，继续找问题，后来发现 优酷、腾讯视频等都会被浏览器劫持，产生双层播放器问题，并且。。。提前2秒结束。好了，自家视频都有问题，这锅是腾讯了的，qqHD版本号6.9.1.1019。</p>
<p>但浏览各网站视频接着发现有些视频并不会被QQ浏览器所劫持，于是想这是QQHD视频播放器的一个bug，要是不用该播放器会不会解决这个问题呢；浏览器应该是在视频加载完成后检查是否有video标签来判断的，在测了几个demo后发现在网页加载后页面就会出现被劫持的标志，也就是左侧那块区域。</p>
<a id="more"></a>
<p>那就在网页加载后创建video标签试试。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	myFunction()</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> x = <span class="built_in">document</span>.createElement(<span class="string">"VIDEO"</span>);</span><br><span class="line">       x.setAttribute(<span class="string">"src"</span>,<span class="string">"f.mp4"</span>);</span><br><span class="line">       x.setAttribute(<span class="string">"width"</span>, <span class="string">"520"</span>);</span><br><span class="line">       x.setAttribute(<span class="string">"height"</span>, <span class="string">"240"</span>);</span><br><span class="line">       x.setAttribute(<span class="string">"controls"</span>, <span class="string">"controls"</span>);</span><br><span class="line">       <span class="built_in">document</span>.body.appendChild(x);</span><br><span class="line">       x.play()</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>结果好像不好使。。<br>难道浏览器检查video标签比执行函数慢？<br>那就来个延迟吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    myFunction()</span><br><span class="line">  &#125;,<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果发现还真的好使。。。。</p>
]]></content>
      <categories>
        <category>兼容性</category>
        <category>video</category>
      </categories>
  </entry>
  <entry>
    <title>display:inline-block流动布局</title>
    <url>/2019/09/12/css/inline-block/</url>
    <content><![CDATA[<p>在使用 float:left  列表布局时当有两行时，第一行中间高度比该行其他的div高,第二行会被第一行最高的块给挡住,如下图</p>
<p><img src="http://qiniu.xiaoxilao.com/b_20200202_134612.png" alt="清除浮动前" title="清除浮动前"> </p>
<p>此时，父级元素坍塌，清除浮动可用伪元素:after或父元素使用display:inline-block。 </p>
<a id="more"></a>

<p><img src="http://qiniu.xiaoxilao.com/b_20200202_134613.png" alt="清除浮动前" title="清除浮动后"></p>
<p>流动布局<br>E6/IE7浏览器同时满足上面的inline标签化以及结束标签连续化，再加上先前现代浏览器下的首尾标签留空，IE6/IE7浏览器也就能够实现列表元素的两端对齐啦！<br>like this</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"test.jpg"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-两端对齐"><a href="#1-两端对齐" class="headerlink" title="1.两端对齐"></a>1.两端对齐</h4><p>列表（或文字）要两端对齐的前提就是内容必须超过一行，所以，要解决最后一行元素无法两端对齐的文字其实很简单，就是在列表（或文字段）的最后创建一个高度为0的宽度100%的透明的inline-block的标签层就可以了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./x.jpg"</span> <span class="attr">width</span>=<span class="string">"120px"</span>/&gt;</span></span><br><span class="line">		属性规定<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./x.jpg"</span> <span class="attr">width</span>=<span class="string">"120px"</span>/&gt;</span></span><br><span class="line">		属性规定<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./x.jpg"</span> <span class="attr">width</span>=<span class="string">"120px"</span>/&gt;</span></span><br><span class="line">		属性规定<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./x.jpg"</span> <span class="attr">width</span>=<span class="string">"120px"</span>/&gt;</span></span><br><span class="line">		属性规定<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./x.jpg"</span> <span class="attr">width</span>=<span class="string">"120px"</span>/&gt;</span></span><br><span class="line">		属性规定<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./x.jpg"</span> <span class="attr">width</span>=<span class="string">"120px"</span>/&gt;</span></span><br><span class="line">		属性规定<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"justify_fix"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;<span class="attribute">text-align</span>:justify;&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">display</span>:inline-block;&#125;</span><br><span class="line"><span class="selector-class">.justify_fix</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>:inline-block;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>; </span><br><span class="line">	<span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对上述插入额外的标签可用伪元素代替,width: 100%;旨在充满整行，这里高度设为1方便查看效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu.xiaoxilao.com/b_20200202_134614.png" alt="两端对齐" title="两端对齐"></p>
<h4 id="2-左对齐"><a href="#2-左对齐" class="headerlink" title="2.左对齐"></a>2.左对齐</h4><p>很多时候，我们希望列表的最后一行是左对齐排列的，而不是两端对齐，这时候怎么办呢？原理与上面的两端对齐一致。就是复制几个列表元素的外层标签，等宽，但高度为0，里面就是个&nbsp;(不可缺)，复制的个数一般就是每行元素的列表个数啦，这样肯定可以保证最后一行元素一定是左对齐排列的啦！,height:0px</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"list left_fix"</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code class="css"><span class="selector-class">.left_fix</span>{ 
    <span class="attribute">padding</span>:<span class="number">0</span>; 
    <span class="attribute">overflow</span>:hidden;
    <span class="attribute">height</span>: <span class="number">1px</span>;
    <span class="attribute">background</span>: red;
}</code></pre>
<p><img src="http://qiniu.xiaoxilao.com/b_20200202_134614.png" alt="左对齐" title="左对齐"></p>
<p>使用inline-block流动布局的好处就是随着窗口的变化，里面的内容也会跟着自动变化</p>
]]></content>
      <categories>
        <category>web前端</category>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>《许三观卖血记》-- 余华</title>
    <url>/2019/07/27/postName/</url>
    <content><![CDATA[<p>1.事情都是被逼出来的，人只有被逼上绝路了，才会有办法，没上绝路以前，不是没想到办法，就是想到了也不知道该不该去做。</p>
<p>2.爱不是我多有钱，有多么大的智慧和成就，而是我把一切给你。关键时刻，替你挡风遮雨。</p>
<p>3.在时代和个人的种种不幸中，我却看到了生活的种种幸福。酸甜苦辣是食物的味道，喜怒哀乐是生活的味道。</p>
<p>4.生活中的各种事情带来的味道总是相伴而至，有时这个味道重点，有时那个味道重点，这样才真实。质朴之人，秉持真性情之人，不是一定什么都看得开，不是一定什么都做得对，不是一定什么问题都能解决，但是生活在他们眼里，就像他们的性情一样真，他们的生活中有所守护，有所坚持，有所为，有所不为，他们的生活即使无奈，但总是有一种可以用来面对无奈的幽默，生活的种种不幸中总会弥漫人性的暖意。</p>
<p>5.人活一辈子，谁会没病没灾。谁没个三长两短?遇到那些倒霉的事，有准备总被没准备好。聪明人做事都给自己留一条退路。</p>
<p>6.就算是你不是我的儿子，就算再骂你，你饿了还是要给你买面吃。</p>
<p>7.人的生命只有一次，但是在写作和回忆里，不仅可以无限次重复生命，还可以选择生存的方式。因此，阅读和回忆无异于重活一次，可以填补生命的遗憾。</p>
<p>8.这就叫屌毛出得比眉毛晚，长得倒比眉毛长。</p>
<a id="more"></a>]]></content>
      <categories>
        <category>文学笔记</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript之Object.defineProperty函数相关知识点</title>
    <url>/2019/07/21/JavaScript/Object.defineProperty/</url>
    <content><![CDATA[<blockquote>
<p>Object.defineProperty(obj, prop, desc)</p>
</blockquote>
<ul>
<li>obj 需要定义属性的当前对象</li>
<li>prop 当前需要定义的属性名</li>
<li>desc 属性描述符</li>
</ul>
<p>对象里目前存在的属性描述符有两种主要形式：<code>数据描述符</code>和<code>存取描述符</code></p>
<ul>
<li><code>数据描述符</code>是一个具有值的属性，该值可以是可写的，也可以是不可写的。  </li>
<li><code>存取描述符</code>是由 getter 函数和 setter 函数所描述的属性。</li>
</ul>
<blockquote>
<p><em>一个描述符只能是这两者其中之一；不能同时是两者</em></p>
</blockquote>
 <a id="more"></a>
<ol>
<li><code>数据描述符</code>具有以下可选键值:  </li>
</ol>
<ul>
<li><strong><code>value</code></strong>：该属性对应的值。可以是任何有效的JavaScript值（数值，对象，函数等）。<br><strong>默认为</strong> <code>undefined</code>。</li>
<li><strong><code>writable</code></strong>：当且仅当该属性的writable键值为true时，属性的值，也就是上面的value，才能被赋值运算符改变。<br><strong>默认为</strong> <code>false</code>不可修改。</li>
</ul>
<ol start="2">
<li><code>存取描述符</code>具有以下可选键值：</li>
</ol>
<ul>
<li><strong><code>get</code></strong>：属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。<br><strong>默认为</strong> <code>undefined</code>。</li>
<li><strong><code>set</code></strong>：属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。<br><strong>默认为</strong> <code>undefined</code>。</li>
</ul>
<p><code>共享键值</code>（默认值是指在使用 Object.defineProperty() 定义属性时的默认值）：</p>
<ul>
<li><strong><code>configurable</code></strong>：当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。<br><strong>默认为</strong> <code>false</code>。</li>
<li><strong><code>enumerable</code></strong>：当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。<br><strong>默认为</strong> <code>false</code>。</li>
</ul>
<p><strong>描述符默认值汇总</strong></p>
<table>
<thead>
<tr>
<th align="center">属性名</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">undefined</td>
</tr>
<tr>
<td align="center">writable</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">get</td>
<td align="center">undefined</td>
</tr>
<tr>
<td align="center">set</td>
<td align="center">undefined</td>
</tr>
<tr>
<td align="center">configurable</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">enumerable</td>
<td align="center">false</td>
</tr>
</tbody></table>
<p>所以，属性描述符只能有两种形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'胖虎'</span>,</span><br><span class="line">    writable: <span class="literal">false</span>, <span class="comment">// 是否可以改变</span></span><br><span class="line">    configurable: <span class="literal">false</span>,<span class="comment">//是否可配置</span></span><br><span class="line">    enumerable: <span class="literal">true</span> <span class="comment">//是否出现在对象的枚举属性中</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="string">'胖虎'</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> userName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(v) &#123;</span><br><span class="line">        userName = v</span><br><span class="line">    &#125;,</span><br><span class="line">    enumerable: <span class="literal">false</span>,<span class="comment">//是否可配置</span></span><br><span class="line">    writable: <span class="literal">false</span>, <span class="comment">// 是否可以改变</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="enumerable"><a href="#enumerable" class="headerlink" title="enumerable"></a>enumerable</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'胖虎'</span>,</span><br><span class="line">    writable: <span class="literal">false</span>, <span class="comment">// 不可以改变</span></span><br><span class="line">    configurable: <span class="literal">false</span>,<span class="comment">//不可删除</span></span><br><span class="line">    enumerable: <span class="literal">false</span> <span class="comment">//不出现在对象的枚举属性中</span></span><br><span class="line">&#125;)</span><br><span class="line">Person.name = <span class="string">'大雄'</span> <span class="comment">//writable：false 修改失败</span></span><br><span class="line"><span class="keyword">delete</span> Person.name <span class="comment">//configurable：false 删除失败，严格模式会报错</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> Person) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key) <span class="comment">//age</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person, Person.name) <span class="comment">//&#123; age: 12 &#125; 胖虎</span></span><br></pre></td></tr></table></figure>

<p>当我们将 <code>enumerable</code> 设置为<code>true</code>时，我们就可以在对象的属性中拿到<code>name</code>字段</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'胖虎'</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span> </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> Person) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key) <span class="comment">//age name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person, Person.name) <span class="comment">//&#123; age: 12, name: '胖虎' &#125; 胖虎</span></span><br></pre></td></tr></table></figure>

<h3 id="configurable"><a href="#configurable" class="headerlink" title="configurable"></a>configurable</h3><p>基本使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'胖虎'</span>,</span><br><span class="line">    writable: <span class="literal">false</span>, </span><br><span class="line">    configurable: <span class="literal">true</span>,<span class="comment">//可配置</span></span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">Person.name = <span class="string">'大雄'</span></span><br><span class="line"><span class="keyword">delete</span> Person.name <span class="comment">//删除成功</span></span><br><span class="line"><span class="built_in">console</span>.log(Person, Person.name) <span class="comment">//&#123; age: 12 &#125; undefined</span></span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'胖虎'</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Person.name = '大雄' //writable: false；&#123; age: 12, name: '胖虎' &#125; 胖虎</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value:<span class="string">'大雄'</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(Person, Person.name) <span class="comment">//&#123; age: 12, name: '大雄' &#125; 大雄</span></span><br></pre></td></tr></table></figure>

<p>上述例子中  </p>
<ul>
<li>由于<code>configurable: true</code>,所以重新利用<code>Object.defineProperty</code>定义了<code>Person</code>的<code>name</code>字段后，成功的修改了<code>name</code>的值；如果将可配置项<code>configurable</code>设置为<code>true</code>，那么在利用这种方法修改<code>name</code>值就会报错</li>
<li>若果<code>configurable: true</code>，那么可自由设置<code>writable</code>；反之，只能将<code>writable</code>由<code>true</code>转为<code>false</code></li>
</ul>
<h3 id="writable"><a href="#writable" class="headerlink" title="writable"></a>writable</h3><p> 将<code>writable</code>设置为<code>true</code>时，name属性就可以改变了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'胖虎'</span>,</span><br><span class="line">    writable: <span class="literal">true</span>, <span class="comment">// 是否可以改变</span></span><br><span class="line">    configurable: <span class="literal">false</span>,<span class="comment">//是否可配置</span></span><br><span class="line">    enumerable: <span class="literal">true</span> <span class="comment">//是否出现在对象的枚举属性中</span></span><br><span class="line">&#125;)</span><br><span class="line">Person.name = <span class="string">'大雄'</span></span><br><span class="line"><span class="built_in">console</span>.log(Person, Person.name) <span class="comment">//&#123; age: 12, name: '大雄' &#125; 大雄</span></span><br></pre></td></tr></table></figure>

<h3 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h3><p>获取值使用get方法；设置一个属性值时使用set方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userName = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> lists = [];</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">'userName'</span>, &#123;</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> userName;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(value) &#123; <span class="comment">//value为接受的参数</span></span><br><span class="line">            userName = value;</span><br><span class="line">            lists.push(&#123;<span class="attr">name</span>: userName&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getLists = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> userList();</span><br><span class="line"><span class="built_in">console</span>.log(p1.userName)<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">p1.userName = <span class="string">'胖虎'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p1.userName)<span class="comment">//胖虎</span></span><br><span class="line"></span><br><span class="line">p1.userName = <span class="string">'大雄'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p1.userName) <span class="comment">//大雄</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = p1.getLists();</span><br><span class="line"><span class="built_in">console</span>.log(res)<span class="comment">// [ &#123; name: '胖虎' &#125;, &#123; name: '大雄' &#125; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> userList();</span><br><span class="line"><span class="keyword">let</span> res2 = p2.getLists();</span><br><span class="line"><span class="built_in">console</span>.log(res2)<span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h3 id="禁止扩展"><a href="#禁止扩展" class="headerlink" title="禁止扩展"></a>禁止扩展</h3><p>如果你想禁止一个对象添加新属性并且保留已有属性，就可以使用<strong><em>Object.preventExtensions(…)</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'胖虎'</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(Person)</span><br><span class="line">Person.grade = <span class="string">'一年级'</span> <span class="comment">//不可添加</span></span><br><span class="line">Person.name = <span class="string">'大雄'</span> <span class="comment">//可修改</span></span><br><span class="line"><span class="built_in">console</span>.log(Person) <span class="comment">//&#123; age: 12, name: '大雄' &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="密封"><a href="#密封" class="headerlink" title="密封"></a>密封</h3><p><strong><em>Object.seal()</em></strong>会创建一个密封的对象，这个方法实际上会在一个现有对象上调用object.preventExtensions(…)并把所有现有属性标记为configurable:false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'胖虎'</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Object</span>.seal(Person)</span><br><span class="line"><span class="keyword">delete</span> Person.name</span><br><span class="line"><span class="built_in">console</span>.log(Person) <span class="comment">//&#123; age: 12, name: '胖虎' &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="冻结"><a href="#冻结" class="headerlink" title="冻结"></a>冻结</h3><ul>
<li>Object.freeze()会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(),并把所有现有属性标记为writable: false,这样就无法修改它们的值。</li>
<li>或则说 冻结对象是指那些不能添加新的属性，不能修改已有属性的值，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性的对象。也就是说，这个对象永远是不可变的；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'胖虎'</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Object</span>.freeze(Person)</span><br><span class="line">Person.name = <span class="string">'大雄'</span></span><br><span class="line"><span class="keyword">delete</span> Person.name</span><br><span class="line"><span class="built_in">console</span>.log(Person) <span class="comment">//&#123; age: 12, name: '胖虎' &#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>web前端</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>关于background-clip属性</title>
    <url>/2019/06/12/css/background-clip/</url>
    <content><![CDATA[<p>background-clip属性的作用就是指定元素背景所在的区域</p>
<p>语法：</p>
<p>background-clip: border-box|padding-box|content-box;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">	<span class="attribute">background-color</span>: currentColor;</span><br><span class="line">	<span class="attribute">background-clip</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>border-box是默认值，表示元素的背景从border区域（包括border）以内开始保留</p>
<a id="more"></a>
<p><img src="http://qiniu.xiaoxilao.com/b_20190202_1.png" alt="border-box" title="border-box"> </p>
<p>background-clip:padding-box;<br>padding-box表示元素的背景从padding区域(包括padding)以内开始保留。</p>
<p><img src="http://qiniu.xiaoxilao.com/b_20190202_2.png" alt="padding-box" title="padding-box">   </p>
<p>background-clip:content-box;<br>content-box表示元素的背景从内容区域以内开始保留。  </p>
<p><img src="http://qiniu.xiaoxilao.com/b_20190202_3.png" alt="content-box" title="content-box"> </p>
<p>实例：创建一些图标按钮  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">   <span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: currentColor;</span><br><span class="line">	<span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu.xiaoxilao.com/b_20190202_4.png" alt="按钮" title="按钮">  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">35px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border-top</span>:<span class="number">10px</span> solid;</span><br><span class="line">	<span class="attribute">border-bottom</span>:<span class="number">10px</span> solid;</span><br><span class="line">	<span class="attribute">background-color</span>: currentColor;</span><br><span class="line">	<span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu.xiaoxilao.com/b_20190202_5.png" alt="按钮" title="按钮">  </p>
]]></content>
      <categories>
        <category>web前端</category>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/02/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
