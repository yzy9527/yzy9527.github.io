<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/05/24/JavaScript/Object.defineProperty/</url>
    <content><![CDATA[<blockquote>
<p>Object.defineProperty(obj, prop, desc)</p>
</blockquote>
<ul>
<li>obj 需要定义属性的当前对象</li>
<li>prop 当前需要定义的属性名</li>
<li>desc 属性描述符</li>
</ul>
<p>对象里目前存在的属性描述符有两种主要形式：<code>数据描述符</code>和<code>存取描述符</code></p>
<ul>
<li><code>数据描述符</code>是一个具有值的属性，该值可以是可写的，也可以是不可写的。  </li>
<li><code>存取描述符</code>是由 getter 函数和 setter 函数所描述的属性。</li>
</ul>
<blockquote>
<p><em>一个描述符只能是这两者其中之一；不能同时是两者</em></p>
</blockquote>
<ol>
<li><code>数据描述符</code>具有以下可选键值:  </li>
</ol>
<ul>
<li><strong><code>value</code></strong>：该属性对应的值。可以是任何有效的JavaScript值（数值，对象，函数等）。<br><strong>默认为</strong> <code>undefined</code>。</li>
<li><strong><code>writable</code></strong>：当且仅当该属性的writable键值为true时，属性的值，也就是上面的value，才能被赋值运算符改变。<br><strong>默认为</strong> <code>false</code>不可修改。</li>
</ul>
<ol start="2">
<li><code>存取描述符</code>具有以下可选键值：</li>
</ol>
<ul>
<li><strong><code>get</code></strong>：属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。<br><strong>默认为</strong> <code>undefined</code>。</li>
<li><strong><code>set</code></strong>：属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。<br><strong>默认为</strong> <code>undefined</code>。</li>
</ul>
<p><code>共享键值</code>（默认值是指在使用 Object.defineProperty() 定义属性时的默认值）：</p>
<ul>
<li><strong><code>configurable</code></strong>：当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。<br><strong>默认为</strong> <code>false</code>。</li>
<li><strong><code>enumerable</code></strong>：当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。<br><strong>默认为</strong> <code>false</code>。</li>
</ul>
<p><img src="http://qiniu.xiaoxilao.com/b_defineProperty.png" alt></p>
<p>所以，只能有两种形式</p>
<pre><code> Object.defineProperty(Person, &apos;name&apos;, {
    value: &apos;胖虎&apos;,
    writable: false, // 是否可以改变
    configurable: false,//是否可配置
    enumerable: true //是否出现在对象的枚举属性中
})</code></pre><p>或者</p>
<pre><code>let userName = &apos;胖虎&apos;
Object.defineProperty(Person, &apos;name&apos;, {
    get() {
        return userName
    },
    set(v) {
        userName = v
    },
    enumerable: false,//是否可配置
    writable: false, // 是否可以改变
})</code></pre><h3 id="enumerable"><a href="#enumerable" class="headerlink" title="enumerable"></a>enumerable</h3><pre><code>let Person = {
    age: 12,
}
Object.defineProperty(Person, &apos;name&apos;, {
    value: &apos;胖虎&apos;,
    writable: false, // 不可以改变
    configurable: false,//不可删除
    enumerable: false //不出现在对象的枚举属性中
})
Person.name = &apos;大雄&apos; //writable：false 修改失败
delete Person.name //configurable：false 删除失败，严格模式会报错
for (let key in Person) {
    console.log(key) //age
}
console.log(Person, Person.name) //{ age: 12 } 胖虎</code></pre><p>当我们将 <code>enumerable</code> 设置为<code>true</code>时，我们就可以在对象的属性中拿到<code>name</code>字段</p>
<pre><code>Object.defineProperty(Person, &apos;name&apos;, {
    value: &apos;胖虎&apos;,
    writable: false,
    configurable: false,
    enumerable: true 
})
for (let key in Person) {
    console.log(key) //age name
}
console.log(Person, Person.name) //{ age: 12, name: &apos;胖虎&apos; } 胖虎</code></pre><h3 id="configurable"><a href="#configurable" class="headerlink" title="configurable"></a>configurable</h3><p>基本使用</p>
<pre><code>Object.defineProperty(Person, &apos;name&apos;, {
    value: &apos;胖虎&apos;,
    writable: false, 
    configurable: true,//可配置
    enumerable: true
})
Person.name = &apos;大雄&apos;
delete Person.name //删除成功
console.log(Person, Person.name) //{ age: 12 } undefined</code></pre><br>

<pre><code>let Person = {
    age: 12,
}
Object.defineProperty(Person, &apos;name&apos;, {
    value: &apos;胖虎&apos;,
    writable: false,
    configurable: true,
    enumerable: true
})
//Person.name = &apos;大雄&apos; //writable: false；{ age: 12, name: &apos;胖虎&apos; } 胖虎
Object.defineProperty(Person, &apos;name&apos;, {
    value:&apos;大雄&apos;,
    writable: false,
})
console.log(Person, Person.name) //{ age: 12, name: &apos;大雄&apos; } 大雄</code></pre><p>上述例子中  </p>
<ul>
<li>由于<code>configurable: true</code>,所以重新利用<code>Object.defineProperty</code>定义了<code>Person</code>的<code>name</code>字段后，成功的修改了<code>name</code>的值；如果将可配置项<code>configurable</code>设置为<code>true</code>，那么在利用这种方法修改<code>name</code>值就会报错</li>
<li>若果<code>configurable: true</code>，那么可自由设置<code>writable</code>；反之，只能将<code>writable</code>由<code>true</code>转为<code>false</code></li>
</ul>
<h3 id="writable"><a href="#writable" class="headerlink" title="writable"></a>writable</h3><p> 将<code>writable</code>设置为<code>true</code>时，name属性就可以改变了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.defineProperty(Person, &apos;name&apos;, &#123;</span><br><span class="line">    value: &apos;胖虎&apos;,</span><br><span class="line">    writable: true, // 是否可以改变</span><br><span class="line">    configurable: false,//是否可配置</span><br><span class="line">    enumerable: true //是否出现在对象的枚举属性中</span><br><span class="line">&#125;)</span><br><span class="line">Person.name = &apos;大雄&apos;</span><br><span class="line">console.log(Person, Person.name) //&#123; age: 12, name: &apos;大雄&apos; &#125; 大雄</span><br></pre></td></tr></table></figure>

<h3 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h3><p>获取值使用get方法；设置一个属性值时使用set方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function userList() &#123;</span><br><span class="line">    let userName = null;</span><br><span class="line">    let lists = [];</span><br><span class="line">    Object.defineProperty(this, &apos;userName&apos;, &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">            return userName;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(value) &#123; //value为接受的参数</span><br><span class="line">            userName = value;</span><br><span class="line">            lists.push(&#123;name: userName&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    this.getLists = function () &#123;</span><br><span class="line">        return lists;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p1 = new userList();</span><br><span class="line">console.log(p1.userName)//null</span><br><span class="line"></span><br><span class="line">p1.userName = &apos;胖虎&apos;;</span><br><span class="line">console.log(p1.userName)//胖虎</span><br><span class="line"></span><br><span class="line">p1.userName = &apos;大雄&apos;;</span><br><span class="line">console.log(p1.userName) //大雄</span><br><span class="line"></span><br><span class="line">let res = p1.getLists();</span><br><span class="line">console.log(res)// [ &#123; name: &apos;胖虎&apos; &#125;, &#123; name: &apos;大雄&apos; &#125; ]</span><br><span class="line"></span><br><span class="line">var p2 = new userList();</span><br><span class="line">let res2 = p2.getLists();</span><br><span class="line">console.log(res2)// []</span><br></pre></td></tr></table></figure>

<h3 id="禁止扩展"><a href="#禁止扩展" class="headerlink" title="禁止扩展"></a>禁止扩展</h3><p>如果你想禁止一个对象添加新属性并且保留已有属性，就可以使用<strong><em>Object.preventExtensions(…)</em></strong></p>
<pre><code>let Person = {
    age: 12,
}
Object.defineProperty(Person, &apos;name&apos;, {
    value: &apos;胖虎&apos;,
    writable: true,
    configurable: true,
    enumerable: true
})
Object.preventExtensions(Person)
Person.grade = &apos;一年级&apos; //不可添加
Person.name = &apos;大雄&apos; //可修改
console.log(Person) //{ age: 12, name: &apos;大雄&apos; }</code></pre><h3 id="密封"><a href="#密封" class="headerlink" title="密封"></a>密封</h3><p><strong><em>Object.seal()</em></strong>会创建一个密封的对象，这个方法实际上会在一个现有对象上调用object.preventExtensions(…)并把所有现有属性标记为configurable:false。</p>
<pre><code>let Person = {
    age: 12,
}
Object.defineProperty(Person, &apos;name&apos;, {
    value: &apos;胖虎&apos;,
    writable: true,
    configurable: true,
    enumerable: true
})
Object.seal(Person)
delete Person.name
console.log(Person) //{ age: 12, name: &apos;胖虎&apos; }</code></pre><h3 id="冻结"><a href="#冻结" class="headerlink" title="冻结"></a>冻结</h3><ul>
<li>Object.freeze()会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(),并把所有现有属性标记为writable: false,这样就无法修改它们的值。</li>
<li>或则说 冻结对象是指那些不能添加新的属性，不能修改已有属性的值，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性的对象。也就是说，这个对象永远是不可变的；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let Person = &#123;</span><br><span class="line">    age: 12,</span><br><span class="line">&#125;</span><br><span class="line">Object.defineProperty(Person, &apos;name&apos;, &#123;</span><br><span class="line">    value: &apos;胖虎&apos;,</span><br><span class="line">    writable: true,</span><br><span class="line">    configurable: true,</span><br><span class="line">    enumerable: true</span><br><span class="line">&#125;)</span><br><span class="line">Object.freeze(Person)</span><br><span class="line">Person.name = &apos;大雄&apos;</span><br><span class="line">delete Person.name</span><br><span class="line">console.log(Person) //&#123; age: 12, name: &apos;胖虎&apos; &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ipad qq浏览器HD video标签劫持问题</title>
    <url>/2019/10/27/video/qqHd/</url>
    <content><![CDATA[<p>问题来源：在升级iOS为12后，项目测试兼容性时发现，有些MP4格式视频在ipad qqHD上会出现以下bug:</p>
<ul>
<li>视频全屏播放会提前2秒结束</li>
</ul>
<p>于是，搞个demo吧，拷了个播放没问题的视频和有问题的视频用纯video标签试了一下，结果：正常的视频还是正常，有问题的视频还是提前2秒结束；（看来videojs是无辜的，看样子是视频的锅了）</p>
<p>好了，让压缩视频的人看看这两个视频是怎么压缩的，有啥子区别。结果。。。。。都是同一个妈生的。</p>
<p>好了，继续找问题，后来发现 优酷、腾讯视频等都会被浏览器劫持，产生双层播放器问题，并且。。。提前2秒结束。好了，自家视频都有问题，这锅是腾讯了的，qqHD版本号6.9.1.1019。</p>
<p>但浏览各网站视频接着发现有些视频并不会被QQ浏览器所劫持，于是想这是QQHD视频播放器的一个bug，要是不用该播放器会不会解决这个问题呢；浏览器应该是在视频加载完成后检查是否有video标签来判断的，在测了几个demo后发现在网页加载后页面就会出现被劫持的标志，也就是左侧那块区域。</p>
<a id="more"></a>
<p>那就在网页加载后创建video标签试试。</p>
<pre><code>window.onload = function(){
    myFunction()
}
 function myFunction() {
    var x = document.createElement(&quot;VIDEO&quot;);
    x.setAttribute(&quot;src&quot;,&quot;f.mp4&quot;);
    x.setAttribute(&quot;width&quot;, &quot;520&quot;);
    x.setAttribute(&quot;height&quot;, &quot;240&quot;);
    x.setAttribute(&quot;controls&quot;, &quot;controls&quot;);
    document.body.appendChild(x);
    x.play()
  }</code></pre><p>结果好像不好使。。<br>难道浏览器检查video标签比执行函数慢？<br>那就来个延迟吧。</p>
<pre><code>window.onload = function(){
  setTimeout(function(){
    myFunction()
  },500);
}</code></pre><p>结果发现还真的好使。。。。</p>
]]></content>
      <categories>
        <category>video</category>
      </categories>
  </entry>
  <entry>
    <title>display:inline-block流动布局</title>
    <url>/2019/09/12/css/inline-block/</url>
    <content><![CDATA[<p>在使用 float:left  列表布局时当有两行时，第一行中间高度比该行其他的div高,第二行会被第一行最高的块给挡住,如下图</p>
<p><img src="http://qiniu.xiaoxilao.com/b_20200202_134612.png" alt="清除浮动前" title="清除浮动前"> </p>
<p>此时，父级元素坍塌，清除浮动可用伪元素:after或父元素使用display:inline-block。 </p>
<a id="more"></a>

<p><img src="http://qiniu.xiaoxilao.com/b_20200202_134613.png" alt="清除浮动前" title="清除浮动后"></p>
<p>流动布局<br>E6/IE7浏览器同时满足上面的inline标签化以及结束标签连续化，再加上先前现代浏览器下的首尾标签留空，IE6/IE7浏览器也就能够实现列表元素的两端对齐啦！<br>like this</p>
<pre><code>&lt;span&gt;
    &lt;a href=&quot;#&quot;&gt;
        &lt;img src=&quot;test.jpg&quot; /&gt;
    &lt;/a&gt;
    &lt;span&gt;描述&lt;/span&gt;&lt;/span&gt;</code></pre><h4 id="1-两端对齐"><a href="#1-两端对齐" class="headerlink" title="1.两端对齐"></a>1.两端对齐</h4><pre><code>列表（或文字）要两端对齐的前提就是内容必须超过一行，所以，要解决最后一行元素无法两端对齐的文字其实很简单，就是在列表（或文字段）的最后创建一个高度为0的宽度100%的透明的inline-block的标签层就可以了

 &lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;list&quot;&gt;&lt;img src=&quot;./x.jpg&quot; width=&quot;120px&quot;/&gt;
  属性规定&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;list&quot;&gt;&lt;img src=&quot;./x.jpg&quot; width=&quot;120px&quot;/&gt;
  属性规定&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;list&quot;&gt;&lt;img src=&quot;./x.jpg&quot; width=&quot;120px&quot;/&gt;
  属性规定&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;list&quot;&gt;&lt;img src=&quot;./x.jpg&quot; width=&quot;120px&quot;/&gt;
  属性规定&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;list&quot;&gt;&lt;img src=&quot;./x.jpg&quot; width=&quot;120px&quot;/&gt;
  属性规定&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;list&quot;&gt;&lt;img src=&quot;./x.jpg&quot; width=&quot;120px&quot;/&gt;
  属性规定&lt;/span&gt;&lt;/li&gt;&lt;span class=&quot;justify_fix&quot;&gt;&lt;/span&gt;
&lt;/ul&gt;

ul{text-align:justify;}
li{display:inline-block;}
.justify_fix{
        display:inline-block;
        width:100%;
        height:0; 
        overflow:hidden;

}</code></pre><p>对上述插入额外的标签可用伪元素代替,width: 100%;旨在充满整行，这里高度设为1方便查看效果</p>
<pre><code>ul:after{
  content: &quot;&quot;;
  width: 100%;
  height: 1px;
  background: red;
  display: inline-block;

}</code></pre><p><img src="http://qiniu.xiaoxilao.com/b_20200202_134614.png" alt="两端对齐" title="两端对齐"></p>
<h4 id="2-左对齐"><a href="#2-左对齐" class="headerlink" title="2.左对齐"></a>2.左对齐</h4><p>很多时候，我们希望列表的最后一行是左对齐排列的，而不是两端对齐，这时候怎么办呢？原理与上面的两端对齐一致。就是复制几个列表元素的外层标签，等宽，但高度为0，里面就是个&nbsp;(不可缺)，复制的个数一般就是每行元素的列表个数啦，这样肯定可以保证最后一行元素一定是左对齐排列的啦！,height:0px</p>
<pre><code>&lt;span class=&quot;list left_fix&quot;&gt; &lt;/span&gt;
.left_fix{ 
    padding:0; 
    overflow:hidden;
    height: 1px;
    background: red;
}</code></pre><p><img src="http://qiniu.xiaoxilao.com/b_20200202_134614.png" alt="左对齐" title="左对齐"></p>
<p>使用inline-block流动布局的好处就是随着窗口的变化，里面的内容也会跟着自动变化</p>
<!--more-->]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>《许三观卖血记》-- 余华</title>
    <url>/2019/07/27/postName/</url>
    <content><![CDATA[<p>1.事情都是被逼出来的，人只有被逼上绝路了，才会有办法，没上绝路以前，不是没想到办法，就是想到了也不知道该不该去做。</p>
<p>2.爱不是我多有钱，有多么大的智慧和成就，而是我把一切给你。关键时刻，替你挡风遮雨。</p>
<p>3.在时代和个人的种种不幸中，我却看到了生活的种种幸福。酸甜苦辣是食物的味道，喜怒哀乐是生活的味道。</p>
<p>4.生活中的各种事情带来的味道总是相伴而至，有时这个味道重点，有时那个味道重点，这样才真实。质朴之人，秉持真性情之人，不是一定什么都看得开，不是一定什么都做得对，不是一定什么问题都能解决，但是生活在他们眼里，就像他们的性情一样真，他们的生活中有所守护，有所坚持，有所为，有所不为，他们的生活即使无奈，但总是有一种可以用来面对无奈的幽默，生活的种种不幸中总会弥漫人性的暖意。</p>
<p>5.人活一辈子，谁会没病没灾。谁没个三长两短?遇到那些倒霉的事，有准备总被没准备好。聪明人做事都给自己留一条退路。</p>
<p>6.就算是你不是我的儿子，就算再骂你，你饿了还是要给你买面吃。</p>
<p>7.人的生命只有一次，但是在写作和回忆里，不仅可以无限次重复生命，还可以选择生存的方式。因此，阅读和回忆无异于重活一次，可以填补生命的遗憾。</p>
<p>8.这就叫屌毛出得比眉毛晚，长得倒比眉毛长。</p>
<a id="more"></a>]]></content>
      <categories>
        <category>文学笔记</category>
      </categories>
  </entry>
  <entry>
    <title>关于background-clip属性</title>
    <url>/2019/06/12/css/background-clip/</url>
    <content><![CDATA[<p>background-clip属性的作用就是指定元素背景所在的区域</p>
<p>语法：</p>
<p>background-clip: border-box|padding-box|content-box;</p>
<pre><code>&lt;div class=&quot;box&quot;&gt;
.box {
    display: inline-block;
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 10px solid red;
    background-color: currentColor;
    background-clip: border-box;
}</code></pre><p>border-box是默认值，表示元素的背景从border区域（包括border）以内开始保留</p>
<a id="more"></a>
<p><img src="http://qiniu.xiaoxilao.com/b_20190202_1.png" alt="border-box" title="border-box"> </p>
<p>background-clip:padding-box;<br>padding-box表示元素的背景从padding区域(包括padding)以内开始保留。</p>
<p><img src="http://qiniu.xiaoxilao.com/b_20190202_2.png" alt="padding-box" title="padding-box">   </p>
<p>background-clip:content-box;<br>content-box表示元素的背景从内容区域以内开始保留。  </p>
<p><img src="http://qiniu.xiaoxilao.com/b_20190202_3.png" alt="content-box" title="content-box"> </p>
<p>实例：创建一些图标按钮  </p>
<pre><code>&lt;div class=&quot;box&quot;&gt; 
.box {
    display: inline-block;
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 10px solid;
    border-radius: 50%;
    background-color: currentColor;
    background-clip: content-box;
}</code></pre><p><img src="http://qiniu.xiaoxilao.com/b_20190202_4.png" alt="按钮" title="按钮">  </p>
<pre><code>.box {
    display: inline-block;
    width: 140px;
    height: 10px;
    padding: 35px 0;
    border-top:10px solid;
    border-bottom:10px solid;
    background-color: currentColor;
    background-clip: content-box;
}</code></pre><p><img src="http://qiniu.xiaoxilao.com/b_20190202_5.png" alt="按钮" title="按钮">  </p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/03/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
